
- - docker - - - - - - - - - - - - -
docker-compose up --build

- - ef core - - - - - - - - - - - - -
 # initial ef command / create migration
dotnet ef migrations add InitialCreate --project src\members.Database.Infrastructure --startup-project src\members.Api

 # undo migration that added but did not update successfully
dotnet ef migrations remove --project .\src\members.Database.Infrastructure\ --startup-project .\src\members.Api\

 # apply migration + make db for first time
dotnet ef database update --project src/members.Database.Infrastructure --startup-project src/members.Api

- - dotnet - - - - - - - - - - - - -
 dotnet clean
 dotnet restore # like npm i -- for nuget files
 dotnet build
 dotnet run --project .\src\members.Api\members.Api.csproj

- - SQLCMD - - - - - - - - - - - - -
 # connect to sql
SQLCMD -S localhost\SQLEXPRESS -E

 # use membersDb
use membersdb;
go

 # list tables
select name from sys.tables; 
go

# run stored procedure ( in dir file is in or path )
SQLCMD -S localhost\SQLEXPRESS -d membersdb -i .\AddParty.sql

# run seed data script after stored procedure ( in dir file is in or path )
SQLCMD -S localhost\SQLEXPRESS -d membersdb -i ..\SeedData\SeedPartiesData.sql

- - pwsh Requests - - - - - - - - - - - - -

Invoke-RestMethod -Uri "http://localhost:5053/all-members" -Method Get
Invoke-RestMethod -Uri "http://localhost:5053/current-members" -Method Get
Invoke-RestMethod -Uri "http://localhost:5053/health" -Method Get

Invoke-RestMethod -Uri "https://localhost:7106/add-member" -Method Put -Headers @{ "Content-Type" = "application/json" } -Body (ConvertTo-Json @{ HouseOfLordsId = 9999; NameFullTitle = "Test"; Gender = "M"; PartyId = 9999; MembershipStatusIsActive = $true; MembershipStartDate = "2019-12-12T00:00:00"; MembershipEndDate = "2024-05-30T00:00:00"; MembershipEndReason = "Test"; MemberFrom = "Test"; ImageUrl = "Test"; }) 


